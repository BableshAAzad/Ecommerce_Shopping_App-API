spring:
  application:
    name: Ecommerce_Shopping_App

    #  DataSource configuration
  datasource:
    url: jdbc:mysql://${DB_HOST_NAME:localhost}:${DB_PORT:3306}/${DB_NAME:ecommerce_shopping_app}
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:root}
    river-class-name: com.mysql.cj.jdbc.Driver

  #  JPA Configuration
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQL8Dialect

  # SMTP configuration
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME:xyz}
    password: ${MAIL_PASSWORD:123xyz}
    properties:
      mail:
        smtp:
          starttls:
            enable: true
            required: true

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_ID:abc}
            client-secret: ${GOOGLE_SECRET:123abc}
            scope: email, profile
            redirect-uri: http://localhost:8080/login/oauth2/code/google
            client-name: google
            authorization-grant-type: authorization_code
          github:
            client-id: ${GITHUB_ID:def}
            client-secret: ${GITHUB_SECRET:123def}
            scope: email, profile
            redirect-uri: http://localhost:8080/login/oauth2/code/github
            client-name: github
            authorization-grant-type: authorization_code
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
  servlet:
    multipart:
      enabled: true
      max-file-size: 3MB
      max-request-size: 3MB


# Application Custom configuration    (3600000 = 1hour and 1296000000 = 15days) in milli
# (3600 = 1hour and 1296000 = 15days) in seconds
application:
  jwt:
    secrete: ${JWT_SECRET:lmn}
    access_expiry_seconds: 3600
    refresh_expiry_seconds: 1296000
  cookie:
    domain: localhost
    same_site: Lax
    secure: false
  client:
    api_key: ${CLIENT_API_KEY:opq}
    username: ${CLIENT_USERNAME:rst}
    client_id: ${CLIENT_ID:123}

#debug: true
#logging:
#  level:
#    org.springframework.security: DEBUG
#    org.springframework.web: DEBUG

#Cloudinary configuration for image upload
cloudinary:
  cloud:
    name: ${CLOUDINARY_CLOUD_NAME:lmn}
  api:
    key: ${CLOUDINARY_API_KEY:lmn123}
    secret: ${CLOUDINARY_API_SECRET:123mmm}

# aws configuration
#cloud:
#  aws:
#    credentials:
#      access-key: ${AWS_S3_ACCESS_KEY:123abc}
#      secrete-key: ${AWS_S3_SECRETE_KEY:123eee}
#    region:
#      static: ap-south-1
#    stack:
#      auto: false
#app:
#  s3:
#    bucket: ecommerceshoppingbucket
#/////////